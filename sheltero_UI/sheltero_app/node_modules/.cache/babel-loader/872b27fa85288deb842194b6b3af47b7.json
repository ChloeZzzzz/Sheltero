{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abeishiwo/Documents/2020Study-Sem1/WEBIT[INFO30005]/frontend_functional_components/mylibraryapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/abeishiwo/Documents/2020Study-Sem1/WEBIT[INFO30005]/frontend_functional_components/mylibraryapp-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar email_validator = require('email-validator');\n\nvar bcrypt = require('bcrypt');\n\nvar users = require('../models/users.js');\n\nvar mongoose = require('mongoose');\n\nvar getUserHomepage = function getUserHomepage(req, res) {\n  if (req.user) {\n    res.render('home-auth.ejs', {\n      useremail: req.user.email\n    });\n  } else {\n    res.redirect('../');\n  }\n};\n\nvar getUserSignup = function getUserSignup(req, res) {\n  if (req.user) {\n    res.redirect('./');\n  } else {\n    res.render(\"signup.ejs\");\n  }\n};\n\nvar getUserLogin = function getUserLogin(req, res) {\n  if (req.user) {\n    res.redirect('./');\n  } else {\n    res.render(\"login.ejs\");\n  }\n};\n\nvar getUserLogout = function getUserLogout(req, res) {\n  if (req.user) {\n    req.logOut();\n    res.render(\"logout.ejs\");\n  } else {\n    res.redirect('../');\n  }\n}; // post user sign up\n// -> encrypt the user's password before store it into the database for security issues\n// -> has to use async since have to wait for encryption completet\n\n\nvar postUserSignup = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var cryptedpw, user;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(email_validator.validate(req.body.email) && emailNotSignedUp(req.body.email))) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 4;\n            return bcrypt.hash(req.body.password, 10);\n\n          case 4:\n            cryptedpw = _context.sent;\n            user = new users({\n              \"id\": Date.now().toString(),\n              \"first_name\": req.body.first_name,\n              \"last_name\": req.body.last_name,\n              \"email\": req.body.email,\n              \"password\": cryptedpw,\n              \"type\": req.body.role,\n              \"resume\": {\n                job: 'programmer'\n              }\n            });\n            user.save().then(function (result) {\n              console.log(result);\n            }).catch(function (err) {\n              console.log(err);\n            });\n            res.redirect('login');\n            _context.next = 12;\n            break;\n\n          case 10:\n            console.log(\"Invalid email or email already signed up!\");\n            res.redirect('signup');\n\n          case 12:\n            _context.next = 19;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Failed to Sign up\");\n            console.log(_context.t0);\n            res.redirect('signup');\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n\n  return function postUserSignup(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // a helper function, checks whether this email is exist in the database\n\n\nvar emailNotSignedUp = function emailNotSignedUp(email) {\n  return users.findOne({\n    'email': email\n  }).then(function (result) {\n    return result !== null;\n  });\n}; //for testing, do for all this\n\n\nvar test_add = function test_add() {\n  var user = new users({\n    _id: new mongoose.Types.ObjectId(),\n    first_name: \"wow\",\n    last_name: \"wow\",\n    email: \"wow@wow.com\",\n    password: \"wowowow\",\n    resume: {\n      jobs: \"wow\"\n    }\n  });\n  users.save().then(function (result) {\n    console.log(result);\n  }).catch(function (err) {\n    console.log(err);\n  });\n};\n\nmodule.exports = {\n  getUserHomepage,\n  getUserSignup,\n  getUserLogin,\n  getUserLogout,\n  postUserSignup\n};","map":{"version":3,"sources":["/Users/abeishiwo/Documents/2020Study-Sem1/WEBIT[INFO30005]/frontend_functional_components/mylibraryapp-frontend/src/userController.js"],"names":["email_validator","require","bcrypt","users","mongoose","getUserHomepage","req","res","user","render","useremail","email","redirect","getUserSignup","getUserLogin","getUserLogout","logOut","postUserSignup","validate","body","emailNotSignedUp","hash","password","cryptedpw","Date","now","toString","first_name","last_name","role","job","save","then","result","console","log","catch","err","findOne","test_add","_id","Types","ObjectId","resume","jobs","module","exports"],"mappings":";;;AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,iBAAD,CAA/B;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAID,GAAG,CAACE,IAAR,EAAc;AACVD,IAAAA,GAAG,CAACE,MAAJ,CAAW,eAAX,EAA4B;AAACC,MAAAA,SAAS,EAAEJ,GAAG,CAACE,IAAJ,CAASG;AAArB,KAA5B;AACH,GAFD,MAEO;AACHJ,IAAAA,GAAG,CAACK,QAAJ,CAAa,KAAb;AACH;AACJ,CAND;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACP,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAID,GAAG,CAACE,IAAR,EAAc;AACVD,IAAAA,GAAG,CAACK,QAAJ,CAAa,IAAb;AACH,GAFD,MAEO;AACHL,IAAAA,GAAG,CAACE,MAAJ,CAAW,YAAX;AACH;AACJ,CAND;;AAQA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACR,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAID,GAAG,CAACE,IAAR,EAAc;AACVD,IAAAA,GAAG,CAACK,QAAJ,CAAa,IAAb;AACH,GAFD,MAEO;AACHL,IAAAA,GAAG,CAACE,MAAJ,CAAW,WAAX;AACH;AACJ,CAND;;AAQA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACT,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAID,GAAG,CAACE,IAAR,EAAc;AACVF,IAAAA,GAAG,CAACU,MAAJ;AACAT,IAAAA,GAAG,CAACE,MAAJ,CAAW,YAAX;AACH,GAHD,MAGO;AACHF,IAAAA,GAAG,CAACK,QAAJ,CAAa,KAAb;AACH;AACJ,CAPD,C,CASA;AACA;AACA;;;AACA,IAAMK,cAAc;AAAA,sEAAG,iBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEXP,eAAe,CAACkB,QAAhB,CAAyBZ,GAAG,CAACa,IAAJ,CAASR,KAAlC,KAA4CS,gBAAgB,CAACd,GAAG,CAACa,IAAJ,CAASR,KAAV,CAFjD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGaT,MAAM,CAACmB,IAAP,CAAYf,GAAG,CAACa,IAAJ,CAASG,QAArB,EAA+B,EAA/B,CAHb;;AAAA;AAGLC,YAAAA,SAHK;AAILf,YAAAA,IAJK,GAIE,IAAIL,KAAJ,CAAU;AACnB,oBAAOqB,IAAI,CAACC,GAAL,GAAWC,QAAX,EADY;AAEnB,4BAAepB,GAAG,CAACa,IAAJ,CAASQ,UAFL;AAGnB,2BAAarB,GAAG,CAACa,IAAJ,CAASS,SAHH;AAInB,uBAAUtB,GAAG,CAACa,IAAJ,CAASR,KAJA;AAKnB,0BAAaY,SALM;AAMnB,sBAASjB,GAAG,CAACa,IAAJ,CAASU,IANC;AAOnB,wBAAU;AAACC,gBAAAA,GAAG,EAAE;AAAN;AAPS,aAAV,CAJF;AAaXtB,YAAAA,IAAI,CAACuB,IAAL,GAAYC,IAAZ,CAAiB,UAAAC,MAAM,EAAI;AACvBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,aAFD,EAEGG,KAFH,CAES,UAAAC,GAAG,EAAI;AACZH,cAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,aAJD;AAKA9B,YAAAA,GAAG,CAACK,QAAJ,CAAa,OAAb;AAlBW;AAAA;;AAAA;AAoBXsB,YAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACA5B,YAAAA,GAAG,CAACK,QAAJ,CAAa,QAAb;;AArBW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBfsB,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR;AACA5B,YAAAA,GAAG,CAACK,QAAJ,CAAa,QAAb;;AA3Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdK,cAAc;AAAA;AAAA;AAAA,GAApB,C,CA+BA;;;AACA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,KAAD,EAAW;AAChC,SAAOR,KAAK,CAACmC,OAAN,CAAc;AAAC,aAAS3B;AAAV,GAAd,EAAgCqB,IAAhC,CAAqC,UAASC,MAAT,EAAgB;AACxD,WAAOA,MAAM,KAAK,IAAlB;AACJ,GAFO,CAAP;AAGH,CAJD,C,CAMA;;;AACA,IAAMM,QAAQ,GAAG,SAAXA,QAAW,GAAK;AAClB,MAAM/B,IAAI,GAAG,IAAIL,KAAJ,CAAU;AACnBqC,IAAAA,GAAG,EAAG,IAAIpC,QAAQ,CAACqC,KAAT,CAAeC,QAAnB,EADa;AAEnBf,IAAAA,UAAU,EAAG,KAFM;AAGnBC,IAAAA,SAAS,EAAG,KAHO;AAInBjB,IAAAA,KAAK,EAAG,aAJW;AAKnBW,IAAAA,QAAQ,EAAG,SALQ;AAMnBqB,IAAAA,MAAM,EAAG;AAACC,MAAAA,IAAI,EAAE;AAAP;AANU,GAAV,CAAb;AAQAzC,EAAAA,KAAK,CAAC4B,IAAN,GAAaC,IAAb,CAAkB,UAAAC,MAAM,EAAI;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,GAFD,EAEGG,KAFH,CAES,UAAAC,GAAG,EAAI;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,GAJD;AAKH,CAdD;;AAgBAQ,MAAM,CAACC,OAAP,GAAiB;AACbzC,EAAAA,eADa;AAEbQ,EAAAA,aAFa;AAGbC,EAAAA,YAHa;AAIbC,EAAAA,aAJa;AAKbE,EAAAA;AALa,CAAjB","sourcesContent":["const email_validator = require('email-validator')\nconst bcrypt = require('bcrypt')\n\nconst users = require('../models/users.js')\nconst mongoose = require('mongoose');\n\nconst getUserHomepage = (req, res) => {\n    if (req.user) {\n        res.render('home-auth.ejs', {useremail: req.user.email})\n    } else {\n        res.redirect('../');\n    }\n}\n\nconst getUserSignup = (req, res) => {\n    if (req.user) {\n        res.redirect('./');\n    } else {\n        res.render(\"signup.ejs\");\n    }\n}\n\nconst getUserLogin = (req, res) => {\n    if (req.user) {\n        res.redirect('./');\n    } else {\n        res.render(\"login.ejs\");\n    }\n}\n\nconst getUserLogout = (req, res) => {\n    if (req.user) {\n        req.logOut()\n        res.render(\"logout.ejs\");\n    } else {\n        res.redirect('../')\n    }\n}\n\n// post user sign up\n// -> encrypt the user's password before store it into the database for security issues\n// -> has to use async since have to wait for encryption completet\nconst postUserSignup = async (req, res) => {\n    try {\n        if (email_validator.validate(req.body.email) && emailNotSignedUp(req.body.email)) {\n            const cryptedpw = await bcrypt.hash(req.body.password, 10);\n            const user = new users({\n                \"id\" : Date.now().toString(),\n                \"first_name\" : req.body.first_name,\n                \"last_name\": req.body.last_name,\n                \"email\" : req.body.email,\n                \"password\" : cryptedpw,\n                \"type\" : req.body.role,\n                \"resume\": {job: 'programmer'}\n            })\n            user.save().then(result => {\n                console.log(result);\n            }).catch(err => {\n                console.log(err);\n            })\n            res.redirect('login');\n        } else {\n            console.log(\"Invalid email or email already signed up!\");\n            res.redirect('signup');\n        }\n\n    } catch (e) {\n        console.log(\"Failed to Sign up\")\n        console.log(e)\n        res.redirect('signup');\n    }\n}\n\n// a helper function, checks whether this email is exist in the database\nconst emailNotSignedUp = (email) => {\n    return users.findOne({'email': email}).then(function(result){\n        return result !== null;\n   });\n}\n\n//for testing, do for all this\nconst test_add = () =>{\n    const user = new users({\n        _id : new mongoose.Types.ObjectId(),\n        first_name : \"wow\",\n        last_name : \"wow\",\n        email : \"wow@wow.com\",\n        password : \"wowowow\",\n        resume : {jobs: \"wow\"},\n    })\n    users.save().then(result => {\n        console.log(result);\n    }).catch(err => {\n        console.log(err);\n    })\n}\n\nmodule.exports = {\n    getUserHomepage,\n    getUserSignup,\n    getUserLogin,\n    getUserLogout,\n    postUserSignup\n}"]},"metadata":{},"sourceType":"module"}